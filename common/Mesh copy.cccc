using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using OpenTK.Graphics.OpenGL4;
using OpenTK.Mathematics;

namespace common
{
    // A simple class meant to help create shaders.
    public class Mesh
    {
        private readonly float[] vertices;
        private readonly uint[] indices;
        private int VAO, VBO, EBO;
        public Mesh(float[] vertices, uint[] indices)
        {
        {
            this.vertices = vertices;
            this.indices = indices;

            setupMesh();
        }

        void setupMesh()
        {
            GL.GenVertexArrays(1, out VAO);
            GL.GenBuffers(1, out VBO);
            GL.GenBuffers(1, out EBO);

            GL.BindVertexArray(VAO);
            GL.BindBuffer(BufferTarget.ArrayBuffer, VBO);

            GL.BufferData(BufferTarget.ArrayBuffer, vertices.Length * sizeof(float), vertices, BufferUsageHint.StaticDraw);

            GL.BindBuffer(BufferTarget.ArrayBuffer, EBO);
            GL.BufferData(BufferTarget.ArrayBuffer, indices.Length * sizeof(uint), 
                 indices, BufferUsageHint.StaticDraw);

            // vertex positions
            GL.EnableVertexAttribArray(0);
            GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), 0);
            // vertex normals
            GL.EnableVertexAttribArray(1);
            GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, sizeof(float), 3 * sizeof(float));
            // vertex texture coords
            GL.EnableVertexAttribArray(2);
            GL.VertexAttribPointer(2, 2, VertexAttribPointerType.Float, false, sizeof(float), 6 * sizeof(float));

            GL.BindVertexArray(0);
        }

        public void Draw(Shader shader)
        {
            shader.Use();
            GL.BindVertexArray(VAO);
            GL.DrawElements(PrimitiveType.Triangles, indices.Length,  DrawElementsType.UnsignedInt, 0);
            GL.BindVertexArray(0);
        }
    }
}